import React, { useState, useEffect } from "react";
import styles from "./MyFlashcards.module.scss";
import { toast } from "react-hot-toast";

import DeckCard from "./components/DeckCard";
import StudyModal from "./components/StudyModal";
import CreateDeckModal from "./components/CreateDeckModal";
import AddWordModal from "./components/AddWordModal";

const MyFlashcards = () => {
  //  Mock data (s·∫Ω thay b·∫±ng API sau)
  const mockDecks = [
    {
      id: 1,
      tenBo: "T·ª´ v·ª±ng JLPT N4",
      capDo: "N4",
      loai: "T·ª´ v·ª±ng",
      tongThe: 45,
      tienDo: 80,
      lanCuoi: "2 gi·ªù tr∆∞·ªõc",
      mau: "xanh",
    },
    {
      id: 2,
      tenBo: "Kanji c∆° b·∫£n",
      capDo: "N3",
      loai: "Kanji",
      tongThe: 80,
      tienDo: 52,
      lanCuoi: "H√¥m qua",
      mau: "xanhLa",
    },
    {
      id: 3,
      tenBo: "C·ª•m giao ti·∫øp h√†ng ng√†y",
      capDo: "N5",
      loai: "C·ª•m t·ª´",
      tongThe: 30,
      tienDo: 95,
      lanCuoi: "30 ph√∫t tr∆∞·ªõc",
      mau: "tim",
    },
  ];

  // State
  const [decks, setDecks] = useState(mockDecks);
  const [filteredDecks, setFilteredDecks] = useState(mockDecks);

  const [searchTerm, setSearchTerm] = useState("");
  const [levelFilter, setLevelFilter] = useState("T·∫•t c·∫£");
  const [typeFilter, setTypeFilter] = useState("T·∫•t c·∫£");

  const [selectedDeck, setSelectedDeck] = useState(null);
  const [showCreate, setShowCreate] = useState(false);
  const [showAddWord, setShowAddWord] = useState(false);
  const [newDeck, setNewDeck] = useState(null);

  // üîç L·ªçc danh s√°ch b·ªô th·∫ª theo 3 ƒëi·ªÅu ki·ªán
  useEffect(() => {
    const lowerSearch = searchTerm.toLowerCase();

    const result = decks.filter((deck) => {
      const matchSearch = deck.tenBo.toLowerCase().includes(lowerSearch);
      const matchLevel = levelFilter === "T·∫•t c·∫£" || deck.capDo === levelFilter;
      const matchType = typeFilter === "T·∫•t c·∫£" || deck.loai === typeFilter;
      return matchSearch && matchLevel && matchType;
    });

    setFilteredDecks(result);
  }, [searchTerm, levelFilter, typeFilter, decks]);

  // ü™Ñ Khi t·∫°o b·ªô th·∫ª m·ªõi
  const handleCreateDeck = (formData) => {
    const newDeckObj = {
      id: Date.now(),
      tenBo: formData.name,
      capDo: formData.level,
      loai: formData.type,
      tongThe: 0,
      tienDo: 0,
      lanCuoi: "Ch∆∞a c√≥",
      mau: "xanh",
    };

    setDecks([...decks, newDeckObj]);
    setNewDeck(newDeckObj);
    toast.success("T·∫°o b·ªô th·∫ª th√†nh c√¥ng!");

    setShowCreate(false);
    setShowAddWord(true); // M·ªü modal th√™m t·ª´ ngay sau khi t·∫°o
  };

  //  Khi l∆∞u c√°c th·∫ª trong AddWordModal
  const handleSaveWords = (cards) => {
    console.log("C√°c th·∫ª ƒë√£ l∆∞u:", cards);
    // Sau n√†y g·ªçi API: POST /api/flashcards/cards
    toast.success(`ƒê√£ l∆∞u ${cards.length} th·∫ª v√†o b·ªô "${newDeck.tenBo}"!`);

    // C·∫≠p nh·∫≠t t·ªïng s·ªë th·∫ª c·ªßa deck ƒë√≥
    setDecks((prev) =>
      prev.map((deck) =>
        deck.id === newDeck.id
          ? { ...deck, tongThe: cards.length, lanCuoi: "V·ª´a t·∫°o" }
          : deck
      )
    );

    setShowAddWord(false);
  };

  return (
    <div className={styles.wrapper}>
      {/* ================= Header ================= */}
      <div className={styles.header}>
        <div>
          <h1>B·ªô th·∫ª ghi nh·ªõ c·ªßa t√¥i</h1>
          <p className={styles.sub}>
            √în t·∫≠p t·ª´ v·ª±ng, kanji v√† c·ª•m c√¢u ti·∫øng Nh·∫≠t c·ªßa ri√™ng b·∫°n
          </p>
        </div>
        <button className={styles.addBtn} onClick={() => setShowCreate(true)}>
          <i className="fa-solid fa-plus"></i> T·∫°o b·ªô m·ªõi
        </button>
      </div>

      {/* ================= Th·ªëng k√™ ================= */}
      <div className={styles.stats}>
        <div>
          <span>{filteredDecks.length}</span>
          <p>B·ªô th·∫ª</p>
        </div>
        <div>
          <span>
            {filteredDecks.reduce((sum, d) => sum + (d.tongThe || 0), 0)}
          </span>
          <p>T·ªïng s·ªë th·∫ª</p>
        </div>
        <div>
          <span>20</span>
          <p>ƒê√£ √¥n h√¥m nay</p>
        </div>
        <div>
          <span>7</span>
          <p>Chu·ªói ng√†y h·ªçc</p>
        </div>
      </div>

      {/* ================= B·ªô l·ªçc ================= */}
      <div className={styles.filters}>
        <input
          placeholder="T√¨m ki·∫øm b·ªô th·∫ª..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        <select
          value={levelFilter}
          onChange={(e) => setLevelFilter(e.target.value)}
        >
          <option value="T·∫•t c·∫£">T·∫•t c·∫£ c·∫•p ƒë·ªô JLPT</option>
          <option value="N5">JLPT N5</option>
          <option value="N4">JLPT N4</option>
          <option value="N3">JLPT N3</option>
          <option value="N2">JLPT N2</option>
          <option value="N1">JLPT N1</option>
        </select>

        <select
          value={typeFilter}
          onChange={(e) => setTypeFilter(e.target.value)}
        >
          <option value="T·∫•t c·∫£">T·∫•t c·∫£ lo·∫°i th·∫ª</option>
          <option value="T·ª´ v·ª±ng">T·ª´ v·ª±ng</option>
          <option value="Kanji">Kanji</option>
          <option value="C·ª•m t·ª´">C·ª•m t·ª´</option>
        </select>
      </div>

      {/* ================= Danh s√°ch b·ªô th·∫ª ================= */}
      <div className={styles.grid}>
        {filteredDecks.length > 0 ? (
          filteredDecks.map((deck) => (
            <DeckCard
              key={deck.id}
              deck={deck}
              onStudy={() => setSelectedDeck(deck)}
              onEdit={(deck) => {
                setNewDeck(deck);
                setShowAddWord(true); // m·ªü modal th√™m/s·ª≠a t·ª´ v·ª±ng
              }}
              onDelete={(deck) => {
                if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·ªô "${deck.tenBo}"?`)) {
                  setDecks((prev) => prev.filter((d) => d.id !== deck.id));
                }
              }}
            />
          ))
        ) : (
          <p>Kh√¥ng t√¨m th·∫•y b·ªô th·∫ª n√†o.</p>
        )}
      </div>

      {/* ================= Modal h·ªçc th·∫ª ================= */}
      {selectedDeck && (
        <StudyModal deck={selectedDeck} onClose={() => setSelectedDeck(null)} />
      )}

      {/* ================= Modal t·∫°o b·ªô th·∫ª m·ªõi ================= */}
      {showCreate && (
        <CreateDeckModal
          onClose={() => setShowCreate(false)}
          onCreate={handleCreateDeck}
        />
      )}

      {/* ================= Modal th√™m t·ª´ v·ª±ng ================= */}
      {showAddWord && (
        <AddWordModal
          deck={newDeck}
          onClose={() => setShowAddWord(false)}
          onSave={handleSaveWords}
        />
      )}
    </div>
  );
};

export default MyFlashcards;
